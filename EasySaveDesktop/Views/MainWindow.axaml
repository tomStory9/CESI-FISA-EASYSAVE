<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:EasySaveDesktop.ViewModels"
        xmlns:models="clr-namespace:EasySaveDesktop.Models"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:controls="clr-namespace:Material.Styles.Controls;assembly=Material.Styles"
        xmlns:materialIcons="clr-namespace:Material.Icons.Avalonia;assembly=Material.Icons.Avalonia"
        xmlns:dialogHost="clr-namespace:DialogHostAvalonia;assembly=DialogHost.Avalonia"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="EasySaveDesktop.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        Icon="/Assets/avalonia-logo.ico"
        Title="EasySaveDesktop">

    <Design.DataContext>
        <!-- This only sets the DataContext for the previewer in an IDE,
             to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
        <vm:MainWindowViewModel/>
    </Design.DataContext>

    <Window.DataTemplates>
        <DataTemplate DataType="models:ErrorDialog">
            <StackPanel>
                <TextBlock Classes="Headline6">Error</TextBlock>
                <TextBlock Classes="Body1"
                           TextAlignment="Center"
                           Text="{Binding Message}" />
                <Button Margin="0 8 0 0"
                        Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=dialogHost:DialogHost}, Path=CloseDialogCommand}">
                    Close
                </Button>
            </StackPanel>
        </DataTemplate>
    </Window.DataTemplates>

    <dialogHost:DialogHost CloseOnClickAway="True">
        <Grid>
            <StackPanel>
                <Button IsVisible="{Binding ShowMassActionButtons}" Content="Start All" Command="{Binding StartAllCommand}" />
                <DataGrid
                    Margin="20"
                    ItemsSource="{Binding BackupJobs, Mode=TwoWay}"
                    IsReadOnly="False"
                    GridLinesVisibility="All"
                    BorderThickness="1"
                    BorderBrush="Gray">
                    <DataGrid.Columns>
                        <DataGridCheckBoxColumn Header="Checked" Binding="{Binding IsChecked}" Width="50"/>
                        <DataGridTextColumn Header="ID" Binding="{Binding Id}" Width="50" IsReadOnly="True"/>
                        <DataGridTextColumn Header="Name" Binding="{Binding Name, UpdateSourceTrigger=LostFocus}" Width="150"/>
                        <DataGridTextColumn Header="Source" Binding="{Binding SourceDirectory, UpdateSourceTrigger=LostFocus}" Width="150"/>
                        <DataGridTextColumn Header="Target" Binding="{Binding TargetDirectory, UpdateSourceTrigger=LostFocus}" Width="150"/>
                        <DataGridTextColumn Header="State" Binding="{Binding State}" Width="100"/>
                        <DataGridTextColumn Header="Total Files to Copy" Binding="{Binding TotalFilesToCopy}" Width="150"/>
                        <DataGridTextColumn Header="Total Files Size" Binding="{Binding TotalFilesSize}" Width="150"/>
                        <DataGridTextColumn Header="Files Left to Do" Binding="{Binding NbFilesLeftToDo}" Width="150"/>
                        <DataGridTextColumn Header="Progression" Binding="{Binding Progression}" Width="100"/>
                        <DataGridTemplateColumn Header="">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <Button Content="{materialIcons:MaterialIconExt Kind=PlayArrow}" Command="{Binding StartCommand}" CommandParameter="{Binding}" IsEnabled="{Binding IsStartEnabled}"/>
                                        <Button Content="{materialIcons:MaterialIconExt Kind=Pause}" Command="{Binding PauseCommand}" CommandParameter="{Binding}" IsEnabled="{Binding IsPauseEnabled}"/>
										<Button Content="{materialIcons:MaterialIconExt Kind=Stop}" Command="{Binding StopCommand}" CommandParameter="{Binding}" IsEnabled="{Binding IsStopEnabled}"/>
                                        <Button Content="{materialIcons:MaterialIconExt Kind=TrashCan}" Command="{Binding RemoveCommand}" CommandParameter="{Binding}" IsEnabled="{Binding IsRemoveEnabled}"/>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </StackPanel>

            <controls:FloatingButton
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                Margin="20"
                Content="{materialIcons:MaterialIconExt Kind=Plus}"
                Command="{Binding OpenCreateBackupConfigWindowCommand}"
            />
        </Grid>
    </dialogHost:DialogHost>

</Window>
